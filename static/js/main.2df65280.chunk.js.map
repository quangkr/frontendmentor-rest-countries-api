{"version":3,"sources":["context/ThemeContext.tsx","context/DataContext.tsx","components/Header.tsx","layouts/MainLayout.tsx","components/SearchBar.tsx","components/FilterSelector.tsx","components/CountryCard.tsx","views/Home.tsx","components/Button.tsx","views/DetailPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Theme","DataContext","createContext","countries","loading","fetchData","console","log","useData","useContext","DataContextProvider","children","useState","setCountries","setLoading","a","fetch","response","json","result","reduce","accumulator","value","alpha3Code","localStorage","setItem","JSON","stringify","useEffect","getItem","TypeError","parse","loadLocalStorage","e","Provider","ThemeContext","theme","Dark","setTheme","warn","useTheme","ThemeContextProvider","Light","Header","className","onClick","icon","iconLightMode","iconDarkMode","MainLayout","SearchBar","setValue","search","type","name","placeholder","onChange","target","StyledOption","rest","capitalizedValue","trim","replace","c","toUpperCase","FilterSelector","options","isOpen","setIsOpen","close","arrowDown","map","option","CountryName","CountryInfo","label","CountryCard","country","formattedPopulation","Intl","NumberFormat","format","population","to","src","flag","alt","region","capital","Home","searchInput","setSearchInput","regionFilter","setRegionFilter","countriesList","useMemo","Object","values","regionList","includes","sort","countriesByRegion","filter","filteredCountriesList","toLowerCase","Button","InfoBlock","arrayToString","array","item","DetailPage","id","useParams","borderCountries","borders","nativeName","subregion","topLevelDomain","currencies","languages","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2df65280.chunk.js","sourcesContent":["import { createContext, useContext, useState, ReactNode } from \"react\";\n\nexport enum Theme {\n  Dark = \"Dark\",\n  Light = \"Light\",\n}\n\nexport type ThemeContextType = {\n  theme: Theme;\n  setTheme: (Theme: Theme) => void;\n};\n\nexport const ThemeContext = createContext<ThemeContextType>({\n  theme: Theme.Dark,\n  setTheme: (theme) => console.warn(\"no theme provider\"),\n});\n\nexport const useTheme = () => useContext(ThemeContext);\n\ntype Props = {\n  children: ReactNode;\n};\n\nexport const ThemeContextProvider = ({ children }: Props) => {\n  const [theme, setTheme] = useState(Theme.Light);\n\n  return (\n    <ThemeContext.Provider value={{ theme, setTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n","import {\n  createContext,\n  useContext,\n  useEffect,\n  useState,\n  ReactNode,\n} from \"react\";\n\ntype Language = {\n  iso639_1: string | null;\n  iso639_2: string | null;\n  name: string;\n  nativeName: string | null;\n};\n\ntype Currency = Record<\"code\" | \"name\" | \"symbol\", string | null>;\n\ntype Translation = Record<\n  \"de\" | \"es\" | \"fr\" | \"ja\" | \"it\" | \"br\" | \"pt\" | \"nl\" | \"hr\" | \"fa\",\n  string | null\n>;\n\ntype RegionalBlocs = {\n  acronym: string;\n  name: string;\n  otherAcronyms: Array<string>;\n  otherNames: Array<string>;\n};\n\nexport type Country = {\n  name: string;\n  topLevelDomain: Array<string>;\n  alpha2Code: string;\n  alpha3Code: string;\n  callingCodes: Array<string>;\n  capital: string;\n  altSpellings: Array<string>;\n  region: string;\n  subregion: string;\n  population: number;\n  latlng: Array<number>;\n  demonym: string | null;\n  area: number | null;\n  gini: number | null;\n  timezones: Array<string>;\n  borders: Array<string>;\n  nativeName: string | null;\n  numericCode: string | null;\n  currencies: Array<Currency>;\n  languages: Array<Language>;\n  translations: Translation;\n  flag: string;\n  regionalBlocs: Array<RegionalBlocs>;\n  cioc: string | null;\n};\n\ntype CountriesList = { [p: string]: Country };\n\nexport type DataContextType = {\n  countries: CountriesList;\n  loading: boolean;\n  fetchData: () => void;\n};\n\nexport const DataContext = createContext<DataContextType>({\n  countries: {},\n  loading: false,\n  fetchData: () => {\n    console.log(\"No data provider\");\n  },\n});\n\nexport const useData = () => useContext(DataContext);\n\ntype Props = {\n  children: ReactNode;\n};\n\nexport const DataContextProvider = ({ children }: Props) => {\n  const [countries, setCountries] = useState<CountriesList>({});\n  const [loading, setLoading] = useState(false);\n\n  function loadLocalStorage() {\n    setLoading(true);\n    const result = localStorage.getItem(\"countries\");\n\n    if (!result) {\n      throw new TypeError(\"countries should be of CountriesList type\");\n    }\n\n    setCountries(JSON.parse(result));\n    setLoading(false);\n  }\n\n  async function fetchData() {\n    setLoading(true);\n    const response = await fetch(\"https://restcountries.eu/rest/v2/all\");\n    const json: Array<Country> = await response.json();\n    const result = json.reduce(\n      (accumulator, value) => ({ ...accumulator, [value.alpha3Code]: value }),\n      {}\n    );\n\n    setCountries(result);\n    localStorage.setItem(\"countries\", JSON.stringify(result));\n    setLoading(false);\n  }\n\n  useEffect(() => {\n    try {\n      loadLocalStorage();\n    } catch (e) {\n      fetchData();\n    }\n  }, []);\n\n  return (\n    <DataContext.Provider value={{ countries, loading, fetchData }}>\n      {children}\n    </DataContext.Provider>\n  );\n};\n","import { useTheme, Theme } from \"context/ThemeContext\";\nimport { InlineIcon } from \"@iconify/react\";\nimport iconLightMode from \"@iconify/icons-ic/outline-light-mode\";\nimport iconDarkMode from \"@iconify/icons-ic/outline-dark-mode\";\n\nexport default function Header() {\n  const { theme, setTheme } = useTheme();\n  function toggleTheme() {\n    if (theme === Theme.Light) {\n      setTheme(Theme.Dark);\n    } else {\n      setTheme(Theme.Light);\n    }\n  }\n\n  return (\n    <header\n      className=\"w-full h-20 flex flex-col justify-center items-center\n                bg-white dark:bg-blue-800\n                text-blue-950 dark:text-white\n                shadow-md\"\n    >\n      <div className=\"w-full px-8 flex justify-between items-end\">\n        <h1 className=\"font-extrabold text-lg\">Where in the world?</h1>\n        <button\n          className=\"flex items-center font-semibold\n                    bg-transparent border-none focus:outline-none\n                    select-none cursor-pointer\"\n          onClick={() => toggleTheme()}\n        >\n          <span className=\"mr-2\">Dark Mode</span>\n          <span className=\"text-3xl\">\n            <InlineIcon icon={iconLightMode} className=\"block dark:hidden\" />\n            <InlineIcon icon={iconDarkMode} className=\"hidden dark:block\" />\n          </span>\n        </button>\n      </div>\n    </header>\n  );\n}\n","import { ReactNode } from \"react\";\nimport { useTheme, Theme } from \"context/ThemeContext\";\n\nimport Header from \"components/Header\";\n\ntype Props = {\n  children: ReactNode;\n};\n\nexport default function MainLayout({ children }: Props) {\n  const { theme } = useTheme();\n  return (\n    <div className={`${theme === Theme.Dark ? \"dark\" : \"\"}`}>\n      <div\n        className=\"w-full min-h-screen\n                  bg-gray-50 dark:bg-blue-900\n                  text-blue-950 dark:text-white\"\n      >\n        <Header />\n        {children}\n      </div>\n    </div>\n  );\n}\n","import { Icon } from \"@iconify/react\";\nimport search from \"@iconify/icons-ic/outline-search\";\n\ntype Props = {\n  value: string;\n  setValue: (value: string) => void;\n};\n\nexport default function SearchBar({ value, setValue }: Props) {\n  return (\n    <div className=\"mx-6 my-8 md:w-1/2 relative\">\n      <Icon\n        icon={search}\n        className=\"h-8 w-auto mx-4 my-auto\n                  bg-transparent text-gray-500 dark:text-white\n                  absolute top-1/2 left-0 transform -translate-y-1/2\"\n      />\n      <input\n        type=\"search\"\n        name=\"search\"\n        placeholder=\"Search for a country...\"\n        className=\"w-full p-4 pl-16\n                  flex flex-row flex-nowrap\n                  bg-white dark:bg-blue-800\n                  rounded overflow-hidden shadow-md\n                  focus:outline-none focus:ring ring-white ring-opacity-80\"\n        value={value}\n        onChange={(e) => setValue(e.target.value)}\n      />\n    </div>\n  );\n}\n","import { useState } from \"react\";\n\nimport { InlineIcon } from \"@iconify/react\";\nimport arrowDown from \"@iconify/icons-ic/baseline-keyboard-arrow-down\";\nimport close from \"@iconify/icons-ic/baseline-close\";\n\ntype OptionProps = {\n  value: string;\n  onClick: () => void;\n} & Record<string, any>;\n\ntype Props = {\n  options: Array<string>;\n  value: string;\n  setValue: (value: string) => void;\n};\n\nconst StyledOption = ({ value, onClick, ...rest }: OptionProps) => {\n  const capitalizedValue = value.trim().replace(/^\\w/, (c) => c.toUpperCase());\n  return (\n    <li className=\"p-2 pl-6 cursor-pointer\" {...rest} onClick={onClick}>\n      {capitalizedValue}\n    </li>\n  );\n};\n\nexport default function FilterSelector({ options, value, setValue }: Props) {\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <div className=\"mx-6 w-60 relative\">\n      <div\n        className=\"w-full p-4 pl-8\n                  flex flex-row justify-between items-center\n                  rounded overflow-hidden shadow-md\n                  bg-white dark:bg-blue-800\n                  capitalize cursor-pointer\"\n        onClick={() => setIsOpen(!isOpen)}\n      >\n        <span>{value}</span>\n        <span className=\"flex flex-row\">\n          <InlineIcon\n            icon={close}\n            className={`${value === \"\" ? \"hidden\" : \"inline\"}\n                      text-xl bg-transparent opacity-50`}\n            onClick={() => setValue(\"\")}\n          />\n          <InlineIcon icon={arrowDown} className=\"text-xl bg-transparent\" />\n        </span>\n      </div>\n      <ul\n        className={`${isOpen ? \"flex\" : \"hidden\"}\n                    flex-col rounded overflow-hidden shadow-md\n                    w-full p-2 mt-2\n                    bg-white dark:bg-blue-800\n                    absolute`}\n      >\n        {options.map((option) => (\n          <StyledOption\n            key={option}\n            value={option}\n            onClick={() => {\n              setValue(option);\n              setIsOpen(false);\n            }}\n          />\n        ))}\n      </ul>\n    </div>\n  );\n}\n","import { Country } from \"context/DataContext\";\nimport { Link } from \"react-router-dom\";\n\ntype CountryNameProps = {\n  name: string;\n};\n\ntype CountryInfoProps = {\n  label: string;\n  value: string | number;\n};\n\ntype Props = {\n  country: Country;\n  className?: string;\n};\n\nconst CountryName = ({ name }: CountryNameProps) => (\n  <h2 className=\"py-4 font-extrabold tracking-wide cursor-pointer text-lg\">\n    {name}\n  </h2>\n);\n\nconst CountryInfo = ({ label, value }: CountryInfoProps) => (\n  <p className=\"text-sm tracking-wide font-light leading-normal\">\n    <strong className=\"font-semibold\">{label}: </strong> {value}\n  </p>\n);\n\nexport default function CountryCard({ country, className = \"\" }: Props) {\n  const formattedPopulation = new Intl.NumberFormat(\"en-US\").format(\n    country.population\n  );\n\n  return (\n    <div\n      className={`w-60 h-80\n      rounded overflow-hidden\n      bg-white dark:bg-blue-800\n      shadow-md\n      ${className}`}\n    >\n      <Link to={`/detail/${country.alpha3Code}`}>\n        <img\n          src={country.flag}\n          alt={`${country.name}'s flag'`}\n          className=\"w-60 h-40 object-cover cursor-pointer\"\n        />\n      </Link>\n      <div className=\"px-4\">\n        <Link to={`/detail/${country.alpha3Code}`}>\n          <CountryName name={country.name} />\n        </Link>\n        <CountryInfo label={\"Population\"} value={formattedPopulation} />\n        <CountryInfo label={\"Region\"} value={country.region} />\n        <CountryInfo label={\"Capital\"} value={country.capital} />\n      </div>\n    </div>\n  );\n}\n","import { useState, useMemo } from \"react\";\nimport { useData, Country } from \"context/DataContext\";\n\nimport SearchBar from \"components/SearchBar\";\nimport FilterSelector from \"components/FilterSelector\";\nimport CountryCard from \"components/CountryCard\";\n\nexport default function Home() {\n  const { countries } = useData();\n  const [searchInput, setSearchInput] = useState(\"\");\n  const [regionFilter, setRegionFilter] = useState(\"\");\n\n  const countriesList = useMemo(() => Object.values(countries), [countries]);\n\n  const regionList = useMemo(\n    () =>\n      countriesList.reduce(\n        (accumulator: Array<string>, country: Country) =>\n          accumulator.includes(country.region)\n            ? accumulator\n            : [...accumulator, country.region].sort(),\n        []\n      ),\n    [countriesList]\n  );\n\n  const countriesByRegion = useMemo(\n    () =>\n      regionFilter\n        ? countriesList.filter((country) => country.region === regionFilter)\n        : countriesList,\n    [countriesList, regionFilter]\n  );\n\n  const filteredCountriesList = useMemo(\n    () =>\n      searchInput\n        ? countriesByRegion.filter((country) =>\n            country.name.toLowerCase().includes(searchInput.toLowerCase())\n          )\n        : countriesByRegion,\n    [countriesByRegion, searchInput]\n  );\n\n  return (\n    <div className=\"w-full h-full flex flex-col justify-center relative\">\n      <div className=\"w-full flex flex-col justify-center md:flex-row md:justify-between md:items-center md:px-6 lg:px-12\">\n        <SearchBar value={searchInput} setValue={setSearchInput} />\n        <FilterSelector\n          options={regionList}\n          value={regionFilter}\n          setValue={setRegionFilter}\n        />\n      </div>\n      <div className=\"grid grid-cols-fill-60 gap-8 mx-8 my-12 md:gap-16 md:mx-12 lg:gap-20 lg:mx-16 justify-center\">\n        {filteredCountriesList.map((country: Country) => (\n          <CountryCard key={country.alpha3Code} country={country} />\n        ))}\n      </div>\n    </div>\n  );\n}\n","import { ReactNode } from \"react\";\n\ntype Props = {\n  children: ReactNode;\n  className?: string;\n};\n\nexport default function Button({ children, className = \"\" }: Props) {\n  return (\n    <button\n      className={`px-8 py-1\n                  inline-flex flex-row\n                  justify-center items-center\n                  bg-white dark:bg-blue-800\n                  rounded-sm shadow-bold border-2 border-transparent\n                  transition-transform transform\n                  hover:cursor-pointer\n                  active:scale-95 active:shadow\n                  focus:outline-none focus:border-current\n                  ${className}`}\n    >\n      {children}\n    </button>\n  );\n}\n","import { Link, useParams } from \"react-router-dom\";\nimport { useData, Country } from \"context/DataContext\";\n\nimport Button from \"components/Button\";\n\ntype RouteParams = {\n  id: string;\n};\n\nconst InfoBlock = ({\n  label,\n  value,\n}: {\n  label: string;\n  value: string | number | null;\n}) => {\n  return (\n    <div className=\"my-1 flex flex-row\">\n      <span className=\"font-semibold flex-shrink-0\">{label}:&nbsp;</span>\n      <span className=\"font-light\">{value}</span>\n    </div>\n  );\n};\n\nfunction arrayToString(array: Array<string | null>) {\n  return array.reduce(\n    (result, item) => (item ? (result ? result + \", \" + item : item) : result),\n    \"\"\n  );\n}\n\nexport default function DetailPage() {\n  const { countries } = useData();\n  const { id } = useParams<RouteParams>();\n\n  const country = countries[id];\n\n  const borderCountries = country\n    ? country.borders.reduce(\n        (accumulator: Array<Country>, value) => [\n          ...accumulator,\n          countries[value],\n        ],\n        []\n      )\n    : [];\n\n  const formattedPopulation = country\n    ? new Intl.NumberFormat(\"en-US\").format(country.population)\n    : \"\";\n\n  return (\n    <>\n      <div\n        className=\"\n          max-w-xl lg:max-w-screen-2xl\n          mx-auto px-8 py-12\"\n      >\n        <Link to=\"/\">\n          <Button>Back</Button>\n        </Link>\n        {country ? (\n          <>\n            <div\n              className=\"\n                flex flex-col lg:flex-row items-center lg:justify-between\n                my-16 lg:my-20\"\n            >\n              <div className=\"lg:w-1/2\">\n                <img src={country.flag} alt={`${country.name}'s flag'`} />\n              </div>\n              <div\n                className=\"\n                  flex flex-col lg:flex-row lg:flex-wrap\n                  lg:w-1/2 lg:ml-24\"\n              >\n                <h1\n                  className=\"\n                    lg:w-full\n                    my-10 lg:my-6\n                    font-extrabold text-2xl lg:text-4xl\"\n                >\n                  {country.name}\n                </h1>\n                <div className=\"flex flex-col lg:w-5/12\">\n                  <InfoBlock label=\"Native Name\" value={country.nativeName} />\n                  <InfoBlock label=\"Population\" value={formattedPopulation} />\n                  <InfoBlock label=\"Region\" value={country.region} />\n                  <InfoBlock label=\"Sub Region\" value={country.subregion} />\n                  <InfoBlock label=\"Capital\" value={country.capital} />\n                </div>\n                <div className=\"flex flex-col lg:w-5/12 mt-6 lg:mt-0 lg:ml-6\">\n                  <InfoBlock\n                    label=\"Top Level Domain\"\n                    value={arrayToString(country.topLevelDomain)}\n                  />\n                  <InfoBlock\n                    label=\"Currencies\"\n                    value={arrayToString(\n                      country.currencies.map((item) => item.name)\n                    )}\n                  />\n                  <InfoBlock\n                    label=\"Languages\"\n                    value={arrayToString(\n                      country.languages.map((item) => item.name)\n                    )}\n                  />\n                </div>\n                <div>\n                  <h2 className=\"mt-8 mb-4 font-semibold text-lg\">\n                    Border countries:&nbsp;\n                  </h2>\n                  <span className=\"flex flex-wrap -mx-2\">\n                    {borderCountries.map((country) => (\n                      <Link\n                        to={`/detail/${country.alpha3Code}`}\n                        key={country.alpha3Code}\n                        className=\"m-2\"\n                      >\n                        <Button className=\"lg:text-sm lg:px-4\">\n                          {country.name}\n                        </Button>\n                      </Link>\n                    ))}\n                  </span>\n                </div>\n              </div>\n            </div>\n          </>\n        ) : (\n          <></>\n        )}\n      </div>\n    </>\n  );\n}\n","import { HashRouter, Switch, Route } from \"react-router-dom\";\nimport { DataContextProvider } from \"context/DataContext\";\nimport { ThemeContextProvider } from \"context/ThemeContext\";\n\nimport MainLayout from \"layouts/MainLayout\";\nimport Home from \"views/Home\";\nimport DetailPage from \"views/DetailPage\";\n\nconst App = () => {\n  return (\n    <HashRouter>\n      <DataContextProvider>\n        <ThemeContextProvider>\n          <MainLayout>\n            <Switch>\n              <Route path=\"/detail/:id\" children={<DetailPage />} />\n              <Route path=\"/\" children={<Home />} />\n            </Switch>\n          </MainLayout>\n        </ThemeContextProvider>\n      </DataContextProvider>\n    </HashRouter>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport \"@fontsource/nunito-sans/300.css\";\nimport \"@fontsource/nunito-sans/600.css\";\nimport \"@fontsource/nunito-sans/800.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}